##输出训练
##实验目的
##掌握输出函数print()及其参数的应用‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬
##
##知识介绍
##（一）‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬
##
##print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False)
## 输出最主要的函数是print()函数，下面介绍一下其参数：‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬
##
##*objects： 表示要输出的一个或多个参数，当输出对象本身为多个值时，*起到解包的作用。直接将多个输出值作为参数时，用逗号 “,” 将各个值分隔开即可。‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬
##
##sep=' '：用于分隔多个输出之间的分隔符，默认用空格分隔输出的多个对象。‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬
##
##end='\n'：输出语句的结束符号，默认每个输出语句结束时都用换行符 '\n' 结尾，使光标换到下一行。‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬
##
##print(1,2,3,4,5)             # 输出：1 2 3 4 5，默认用空格分隔多个输出对象
##print(1,2,3,4,5,sep = ',')   # 输出：1,2,3,4,5，各输出对象间用指定的逗号分隔
##print(2019,11,18,sep = '/')  # 输出：2019/11/18
##print(23,59,36,sep = ':')    # 输出：23:59:36
##print([1,2,3,4,5])           # 输出：[1, 2, 3, 4, 5]，这是一个列表对象
##print(*[1,2,3,4,5])          # 输出：1 2 3 4 5，输出时对列表对象（序列类型）进行解包
##print('12345')               # 输出：12345，这是一个对象
##print(*'12345')              # 输出：1 2 3 4 5，输出时对字符串对象（序列类型）进行解包
##for i in range(5):           # 产生整数序列：0,1,2,3,4，依次赋值给i
##	print(i)                 # 输出后换行，竖向输出0 1 2 3 4
### 加参数end = ','，输出后不换行，每个输出后跟一个逗号0,1,2,3,4,
##for i in range(5):
##	print(i,end = ',')       
### 加参数end = ' '，输出后不换行，每个输出后跟一个逗号0 1 2 3 4 （注意4后面有空格）
##for i in range(5):
##	print(i,end = ' ')   
##file=sys.stdout：默认调用 sys.stdout.write() 方法将输出打印到控制台(默认的显示器)；‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬
##
##print('这是要写入的测试数据',file=f)                 
### 将输出的内容 '这是要写入的测试数据' 写入到文件对象 f 中，即写入文件test.txt中
##在已经创建了文件对象的前提下，可通过 file 参数将输出打印到其他文件对象中，如 file=f (f 是已经创建好的文件对象)‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬
##
##f = open('test.txt','w',encoding = 'utf-8')       
### 以写模式打开当前路径下的文件test.txt（文件不存在时创建文件），创建文件对象，命名为： f
##
##print('这是要写入的测试数据')                        
### file参数缺省时，默认输出到控制台，即显示器
##
##print('这是要写入的测试数据',file=f)                 
### 将输出的内容 '这是要写入的测试数据' 写入到文件对象 f 中，即写入文件test.txt中
##
##f.close()                                          
### 文件对象的 close()方法刷新缓冲区里任何还没写入的信息，并关闭该文件，这之后便不能再进行写入。
##flush=False：将缓存里面的内容立即输出到标准输出流(控制台或文件)，这个功能大多用于服务器端‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬
##
##（二）‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬
##
##fo = open(file, mode='r', buffering=-1, encoding=None)
### open()函数打开一个文件，创建一个文件对象，命名为fo(fo为用户任意命名的字符串)
### 此处加对文件对象的操作
##
##fo.close()  # 文件对象的 close()方法刷新缓冲区里任何还没写入的信息，并关闭该文件，这之后便不能再进行写入。
##参数file是一个字符串表示的文件名称，或者一个数组表示的文件名称。文件名称可以包含相对当前目录的路径，也可以包含绝对路径表示。
##参数mode是指明打开文件的模式。默认值是’r’，表示使用文本的方式打开文件来读取。
##‘r’表示打开文件只读，不能写。
##‘w’表示打开文件只写，并且清空文件。
##‘x’表示独占打开文件，如果文件已经存打开就会失败。
##‘a’表示打开文件写，不清空文件，在文件后尾追加的方式写入。
##‘b’表示二进制的模式打开文件。
##‘t’表示文本模式，默认情况下就是这种模式。
##‘+’打开文件更新（读取或写入）。
##缺省时的模式就相当于’rt’。比如’w+b’就是打开文件进入读写，把文件清空；’r+b’打开文件，但不把文件清空。
##参数encoding是指明对文件编码，仅适用于文本文件。如果不明编码方式，默认是使用当前操作系统默认的编码码方式。
##（三）‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬
##
##Range也是一种数据类型，一般用来生成不可变的数值序列，常用于for循环，基本使用语法：‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬
##
##range(stop)
##range([start,] stop)
##range([start,] stop [, step])
##其中start、stop和step必须为整型数字，start省略时，默认值为0；step省略时默认值为1，stop不可省略
##for i in range(10):     # 从 0-9 循环10次，每次i依次取其中一个值
##    print(i,end = ',')  # 每个输出后面跟一个逗号做为结束标记
### 0,1,2,3,4,5,6,7,8,9,
##
##for i in range(1,11):   # 从 1-10 循环10次，每次i依次取其中一个值
##    print(i,end = ',')
### 1,2,3,4,5,6,7,8,9,10,
##实验任务描述
##1. 输入“1”，输出“Hello World!”‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬
##
##2. 输入“2”，输出“Hello Python!”‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬
##
##3. 输入“3”，在一行内输出1-5，用空格分隔‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬
##
##4. 输入“4”，在一行内输出1-5，用逗号分隔‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬
##
##5. 输入“5”，分5行输出 1-5，每行一个数字‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬
##
##6. 输入“6”，在同一行内输出1-5，输出的每个数字后跟一个分号“;”‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬
##
##7. 输入其他字符，输出“结束程序”




s = input()        # 输入一个字符
if s == '1':       # 当输入为"1"时，执行以下语句
    # 对齐这个位置下一行写实现第1个功能的语句
    print('Hello World!')  # 需要编辑的输出语句写在每个分支下的这一行
elif s == '2':     # 当输入为"2"时，执行以下语句
    # 对齐这个位置下一行写实现第2个功能的语句
	print('Hello Python!')
elif s == '3':     # 当输入为"3"时，执行以下语句
    # 对齐这个位置下一行写实现第3个功能的语句
    print(1,2,3,4,5)
elif s == '4':     # 当输入为"4"时，执行以下语句
    # 对齐这个位置下一行写实现第4个功能的语句
    print(1,2,3,4,5,sep = ',')
elif s == '5':     # 当输入为"5"时，执行以下语句
    # 对齐这个位置下一行写实现第4个功能的语句
    print(1)
    print(2)
    print(3)
    print(4)
    print(5)
elif s == '6':     # 当输入为"5"时，执行以下语句
    # 对齐这个位置下一行写实现第4个功能的语句
    for i in range(1,6):
        print(i,end = ';')
else:              # 当输入为其他字符时，执行以下语句
    # 对齐这个位置下一行写实现第5个功能的语句
    print("结束程序")


